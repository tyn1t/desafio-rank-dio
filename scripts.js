
// ÔÅî
// Entendendo o Desafio
 
// Agora √© a sua hora de brilhar e construir um perfil de destaque na DIO! Explore todos os conceitos explorados at√© aqui e replique (ou melhore, porque n√£o?) este projeto pr√°tico. Para isso, crie seu pr√≥prio reposit√≥rio e aumente ainda mais seu portf√≥lio de projetos no GitHub, o qual pode fazer toda diferen√ßa em suas entrevistas t√©cnicas üòé
 
// Neste reposit√≥rio, insira todos os links e arquivos necess√°rios para seu projeto, seja um arquivo de banco de dados ou um link para o template no Figma.
 
// Dica: Se o expert forneceu um reposit√≥rio Github, voc√™ pode dar um "fork" no reposit√≥rio dele para organizar suas altera√ß√µes e evolu√ß√µes mantendo uma refer√™ncia direta ao c√≥digo-fonte original.
 
// Instru√ß√µes para entrega
//  # 2Ô∏è‚É£ Calculadora de partidas Rankeadas
// **O Que deve ser utilizado**

// - Vari√°veis
// - Operadores
// - La√ßos de repeti√ß√£o
// - Estruturas de decis√µes
// - Fun√ß√µes

// ## Objetivo:

// Crie uma fun√ß√£o que recebe como par√¢metro a quantidade de vit√≥rias e derrotas de um jogador,
// depois disso retorne o resultado para uma vari√°vel, o saldo de Rankeadas deve ser feito atrav√©s do calculo (vit√≥rias - derrotas)

// Se vit√≥rias for menor do que 10 = Ferro
// Se vit√≥rias for entre 11 e 20 = Bronze
// Se vit√≥rias for entre 21 e 50 = Prata
// Se vit√≥rias for entre 51 e 80 = Ouro
// Se vit√≥rias for entre 81 e 90 = Diamante
// Se vit√≥rias for entre 91 e 100=81 e 90  Lend√°rio
// Se vit√≥rias for maior ou igual a 101 = Imortal

// ## Sa√≠da

// Ao final deve se exibir uma mensagem:


function calculadoraPartidasRankeadas(vitorias=0, derrotas=0){
    let saldoPartidas = vitorias - derrotas;
    return saldoPartidas
}

function Rankeadas(){
    return ["Ferro", "Bronze", "Prata", "Ouro", "Diamante", "Lend√°rio", "Imortal"]
}

let saldoVitorias = calculadoraPartidasRankeadas(93, 2)
let nivel = Rankeadas()

switch (saldoVitorias){ 
    case 11 <= 20:
        console.log(`O Her√≥i tem de saldo de ${saldoVitorias} est√° no n√≠vel de ${nivel[0]}`)
        break
    case 21<= 50:
        console.log(`O Her√≥i tem de saldo de ${saldoVitorias} est√° no n√≠vel de ${nivel[1]}`)
        break  
    case 51 <= 80:
        console.log(`O Her√≥i tem de saldo de ${saldoVitorias} est√° no n√≠vel de ${nivel[3]}`)
        break 
    case 81 <= 90:
        console.log(`O Her√≥i tem de saldo de ${saldoVitorias} est√° no n√≠vel de ${nivel[4]}`)
        break 
    case 91 <= 100:
        console.log(`O Her√≥i tem de saldo de ${saldoVitorias} est√° no n√≠vel de ${nivel[5]}`)
        break 
    default:
        console.log(`O Her√≥i tem de saldo de ${saldoVitorias} est√° no n√≠vel de ${nivel[6]}`)
    
}

